<template>
  <div class="list">
    <div class="crumbs">
      <el-breadcrumb separator=">">
        <el-breadcrumb-item>> 服务管理</el-breadcrumb-item>
        <el-breadcrumb-item>维护列表</el-breadcrumb-item>
      </el-breadcrumb>
    </div>
    <div class="search-wrapper">
      <el-form :inline="true" :model="formInline" class="demo-form-inline query-form">
        <el-form-item label="名称">
          <el-autocomplete
              class="inline-input"
              v-model="formInline.name"
              :fetch-suggestions="querySearch"
              placeholder="请输入名称"
              :trigger-on-focus="true"
              @select="handleSelect"
          ></el-autocomplete>
        </el-form-item>
        <el-form-item label="产品列表：">
          <el-select v-model="formInline.productCode" clearable placeholder="请选择">
            <el-option :label="item.productName" :value="item.code" v-for="(item, index) in produceList" :key="index"></el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="基因数">
          <el-input v-model="formInline.geneNum"></el-input>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" size="medium" @click="getListData(1)">查询</el-button>
          <el-button type="success" size="medium" @click="addBlock">添加服务</el-button>
        </el-form-item>
      </el-form>
    </div>
    <div class="table-data"
         v-loading="false"
         element-loading-text="拼命加载中">
      <el-table :data="tableData" stripe style="width: 100%">
        <el-table-column label="序号" width="122">
          <template slot-scope="scope">
            {{ (currentPage - 1) * pageSize + scope.$index + 1 }}
          </template>
        </el-table-column>
        <el-table-column prop="businessName" label="服务名称" width=""></el-table-column>
        <!-- <el-table-column prop="name"  label="中文名称" width=""></el-table-column> -->
        <el-table-column prop="businessNameEn" label="英文名称" width=""></el-table-column>
        <el-table-column prop="productName" label="产品名称" width=""></el-table-column>
        <!-- <el-table-column prop="geneList" label="瘤种" width=""></el-table-column> -->
        <el-table-column prop="createTime" sortable :formatter="dateFormat" label="创建时间" width=""></el-table-column>
        <el-table-column prop="updateTime" sortable :formatter="dateFormat" label="修改时间" width=""></el-table-column>
        <el-table-column label="操作" width="260">
          <template slot-scope="scope">
            <el-button type="text" size="mini"  @click="goBind(scope.row.code, currentPage)">绑定</el-button>
            <el-button type="text" size="mini"  @click="goEdit(scope.row.code, currentPage)">修改</el-button>
            <el-button type="text" size="mini"  @click="showCopyLog(scope.row.code)">复制</el-button>
            <el-button type="text" size="mini"  @click="goDel(scope.row.code)">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
    </div>
    <!-- 分页 -->
    <pager :current-page="currentPage" v-on:handleSizeChange="handelCurrent" :pageSize="pageSize" :total-count="totalCount" v-on:handleCurrentChange="getListData"></pager>

    <el-dialog title="选择瘤种" :visible.sync="copylog" width="80%">
      <el-row :gutter="10">
        <el-col :span="24">
          <!-- <el-select v-model="cancerCodes" style="width:90%" multiple placeholder="请选择癌种类型">
              <el-option
                  v-for="item in optionItem"
                  :key="item.code"
                  :label="item.name"
                  :value="item.name">
              </el-option>
          </el-select> -->
          <el-checkbox-group v-model="cancerCodes" size="medium">
            <el-checkbox border v-for="item in optionItem" :label="item.name" :key="item.code">{{item.name}}</el-checkbox>
          </el-checkbox-group>
        </el-col>
      </el-row>
      <el-row>
        <el-col :span="24" style="text-align:center">
          <el-button type="primary" size="medium" :loading="loading" @click="goCopy(cancerCode)">确定</el-button>
          <el-button size="medium"  @click="copylog = false">取消</el-button>
        </el-col>
      </el-row>
    </el-dialog>
  </div>
</template>
<script>
  import URL from '@/common/js/URL.js'
  import Pager from '@/components/common/pager'
  import axios from 'axios'
  import moment from 'moment'
  export default {
    created () {
      this.getData()
      this.getProcessList()
      this.getListData(this.$route.params.pager)
      this.getOptionStep()
    },
    data () {
      return {
        formInline: {
          productCode: '',
          name: '',
          geneNum: ''
        },
        produceList: [],
        tableData: [{
          businessName:"",
          code:null,
          createTime:null,
          createUserCode:null,
          businessNameEn:"",
          name:"",
          pageNumber:null,
          pageSize:null,
          type:1,
          updateTime:null,
          updateUserCode:null
        }],
        currentPage: 1,
        pageSize: 10,
        pageNum: 0,
        totalCount: 0,
        loading: false,
        copylog: false,
        optionItem: [],
        cancerCodes: [],
        cancerList: [],
        cancerCode: '',
        categoryList: [],
        searchNameList: []
      }
    },
    components: {
      Pager: Pager
    },
    methods: {
      addBlock () {
        this.$router.push({
          path: '/maintainStep/'
        })
      },
      getData () {
        let that = this
        axios.get(URL.api_name + 'cloud/project/product_list', {
          params: {
            productName: ''
          }
        }).then(function (respose) {
          let data = respose.data
          that.produceList = data.data
          that.loading = false
        }, function (error) {
          that.loading = false
          that.$message({
            type: 'error',
            message: '查询失败',
            duration: 1000
          })
        })
      },
      // 获取癌种列表数据
      getOptionStep() {
          let that = this
          axios.get(URL.api_name + 'cloud/cancerList').then(function(resp){
              if(resp.data.code === "100"){
                  that.optionItem = resp.data.data
              }
          })
      },
      getProcessList () {
        // 1、进图先获取可用流程列表
        var that = this
        axios.get(URL.api_name + 'cloud/project/business_list').then(function (res) {
          if (res.data.code === '100') {
            let checkItems = res.data.data
            if(checkItems.length > 0){
              for(let i = 0;i < checkItems.length;i++){
                that.searchNameList.push({
                  value: checkItems[i].businessName
                })
              }
            }
          }
        }, function (error) {
          that.$message({
            type: 'error',
            message: '查询失败',
            duration: 1000
          })
        })
      },
      handelCurrent(val) {
        let that = this
        that.pageSize = val
        that.getListData(that.currentPage)
      },
      getListData (num) {
        // console.log(num)
        let that = this
        if (num !== undefined) {
          that.currentPage = parseInt(num)
        }
        // alert(that.currentPage)
        axios.get(URL.api_name + 'cloud/project/getBusinesByPage', {
          params: {
            pageSize : that.pageSize,
            pageNumber : num,
            businessName: that.formInline.name,
            geneNum: that.formInline.geneNum,
            productCode: that.formInline.productCode
          }
        }).then(function(respose){
            if ( respose.data.code === '100' ) {
              // that.searchNameList = []
              that.tableData = respose.data.data.list
              that.totalCount = respose.data.data.total
              //  搜索联想功能
              // if(that.tableData.length > 1){
              //   for(let i = 0; i < that.tableData.length - 1;i++) {
              //     that.searchNameList.push({
              //       value: that.tableData[i].businessName
              //     })
              //   }
              // }else{
              //   that.searchNameList = []
              // }
              // console.log(that.searchNameList)
            } else {
              that.$message({
                type: 'error',
                message: '查询失败' + respose.data.message,
                duration: '1000'
              })
            }     
        }),function(error){
          that.$message({
            type: 'error',
            message: '查询失败',
            duration: '1000'
          })
        }
      },
      dateFormat (row, column) {
        let date = row[column.property]
        if (date === null) {
           return date = ''
        }
        return moment(date).format('YYYY-MM-DD HH:mm:ss')
      },
      goRun (id) {
        this.$router.push({
          path: '/serviceToReportItem/' + id
        })
      },
      goBind(id, pager) {
          this.$router.push({
            path: '/maintainBind/' + id + '/' + pager
          })
      },
      goEdit(id, pager) {
        // alert(index)
        this.$router.push({
          path: '/maintainStepEdi/' + id + '/' + pager
        })
      },
      // goEdit (scope, id, typeid) {
      //   localStorage.setItem('keyer', JSON.stringify(scope.jsonValue))
      //   this.$router.push({
      //     path: '/ServiceEdit/' + id + '/' + typeid
      //   })
      // },
      goReportInfo (language, id) {
        this.$router.push({
          path: '/reportInfo/' + language + '/' + id
        })
      },
      goDel (id) {
        var that = this
        that.$confirm('确定删除吗？', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          axios.get(URL.api_name + 'cloud/project/deleteBusines', {
            params: {
                businesCode: id
            }
          }).then(res => {
            if (res.data.code === '100') {
              that.$message({
                type: 'success',
                message: '删除成功',
                duration: 1000
              })
              that.getListData(that.currentPage)
            }
          }).catch(err => {
            that.$message({
              type: 'error',
              message: '删除失败',
              duration: 1000
            })
            console.log(err)
          })
        }).catch(() => {})
      },
      //  添加联想功能
      querySearch(queryString, cb) {
          var searchNameList  = this.searchNameList
          var results = queryString ? searchNameList .filter(this.createFilter(queryString)) : searchNameList
          // 调用 callback 返回建议列表的数据
          cb(results)
      },
      createFilter(queryString) {
          return (restaurant) => {
                return (restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0)
          }
      },
      handleSelect(item) {
          console.log(item)
      },
      showCopyLog(code) {
        let that = this
        that.cancerCodes = []
        that.cancerList = []
        that.copylog = true
        that.cancerCode = code
        // that.goCopy(code)
      },
      goCopy(code) {
        let that = this
        that.loading = true
        if(that.cancerCodes === []) {
          that.$message({
            type: 'error',
            message: '未选择瘤种，请先选择一种瘤种',
            duration: 3000
          })
          return false
        }
        for (let n = 0; n < that.optionItem.length; n++) {
          for(let i = 0; i < that.cancerCodes.length; i++) {
            if(that.cancerCodes[i] === that.optionItem[n].name) {
              that.cancerList.push({
                name: that.cancerCodes[i],
                diseaseEnName: that.optionItem[n].diseaseEnName
              })
            }
          }
        }
        // console.log(that.cancerList)
        axios.post(URL.api_name + 'cloud/project/copyBusiness', {cancerList: that.cancerList, code: code}).then(res => {
          if(res.data.code === '100') {
            that.$message({
              type: 'success',
              message: '复制成功',
              duration: 2000
            })
            that.getListData(this.$route.params.pager)
          } else {
            that.$message({
              type: 'error',
              message: '复制失败：' + res.data.message,
              duration: 2000
            })
          }
          that.loading = false
          that.copylog = false
        })
      }
    }
  }
</script>
<style lang="less" scoped>
  .coupon-logo{
    display: inline-block;
    width: 80px;
    height: 80px;
    border-radius: 50%;
    vertical-align: bottom;
  }
   .el-row {
    margin-bottom: 20px;
    &:last-child {
      margin-bottom: 0;
    }
  }
  .el-checkbox{margin:0 0 10px 10px; min-width:200px;}
</style>

