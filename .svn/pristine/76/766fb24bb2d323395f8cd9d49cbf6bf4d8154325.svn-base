<template>
	<div class="base_msg blockContent">
		<div class="subItems">
			<div class="subname">
				<span>基因表达检出情况</span>
			</div>
			<div class="search-wrapper" style="margin: -11px 0 10px 0;">
				<el-form :inline="true" :model="formInline" class="demo-form-inline query-form">
					<el-form-item label="基因">
						<!-- <el-input size="medium" v-model="formInline.gene" placeholder="请输入名称"></el-input> -->
						<el-autocomplete class="inline-input" v-model="formInline.gene" :fetch-suggestions="querySearch" placeholder="请输入名称"
						 :trigger-on-focus="false">
						</el-autocomplete>
					</el-form-item>
					<el-form-item>
						<el-button type="primary" size="medium" @click="blockSearch(formInline)">查询</el-button>
					</el-form-item>
				</el-form>
			</div>
			<div class="addBar" style="padding:0px 0 23px; text-align:right;">
				<el-button type="primary" size="medium" @click="goAdd()">添加</el-button>
				<!-- <el-button type="primary" @click="">发送邮件</el-button> -->
			</div>
			<div class="">
				<el-table class="tableList hasLine" :data="formData1.list" border stripe ref="table" style="width: 100%" @cell-click="cellClick">
					<el-table-column prop="gene" label="基因名称" width="280" align="center">
						<template slot-scope="scope">
							<span v-if="!scope.row.isAdd">{{ scope.row.gene }}<span class="bluesj"></span></span>
							<el-input v-if="scope.row.isAdd" v-model="scope.row.gene" placeholder=""></el-input>
							<!-- <popdialog v-if="!scope.row.isAdd" :text="scope.row.gene" :scope="scope.row" windowType="gene" :popData="popData1" :formDatas="formData1"
                 :minMark="minMark" :checkMark="checkMark" :cacheData="cacheData" @cmmk="cmmk" @sWindow="sWindow('gene', scope.row.code)" @pushHead="pushHead"
                 @changeTab="changeTab" @closePanel="closePanel"></popdialog> -->
						</template>
					</el-table-column>
					<el-table-column prop="variantType" label="mRNA/蛋白表达">
						<template slot-scope="scope">
							<span v-if="!scope.row.isEdit || !scope.row.isAdd">{{ scope.row.variantType }}<span :class="scope.row.hasValidata == '1' ? 'yellosj' :'bluesj'"></span></span>
							<!-- <el-input v-if="scope.row.isEdit" v-model="scope.row.variant" @blur="inputSub(scope.row.code, 'variant', scope.row.variant)" placeholder=""></el-input> -->
							<el-select v-if="scope.row.isEdit || scope.row.isAdd" v-model="scope.row.variantType">
								<el-option label="mRNA表达" value="mRNA表达"></el-option>
								<el-option label="蛋白表达" value="蛋白表达"></el-option>
							</el-select>
						</template>
					</el-table-column>

					<el-table-column prop="variant" label="表达情况">
						<template slot-scope="scope">
							<span v-if="!scope.row.isEdit || !scope.row.isAdd">{{ scope.row.variant }}</span>
							<!-- <popdialog v-if="!scope.row.isEdit || !scope.row.isAdd" :text="scope.row.variant" :scope="scope.row" windowType="variant" :popData="popData1" :formDatas="formData1"
							 :minMark="minMark" :checkMark="checkMark" :cacheData="cacheData" @cmmk="cmmk" @sWindow="sWindow('variant', scope.row.code)" @pushHead="pushHead"
							 @changeTab="changeTab" @closePanel="closePanel" @blockSearch="blockSearch"></popdialog> -->
							<!-- <el-input v-if="scope.row.isEdit" v-model="scope.row.variant" @blur="inputSub(scope.row.code, 'variant', scope.row.variant)" placeholder=""></el-input> -->
							<el-select v-if="scope.row.isEdit || scope.row.isAdd" v-model="scope.row.variant">
								<el-option label="正常表达" value="正常表达"></el-option>
								<el-option label="表达阴性" value="表达阴性"></el-option>
								<el-option label="低表达" value="低表达"></el-option>
								<el-option label="高表达" value="高表达"></el-option>
							</el-select>
						</template>
					</el-table-column>

					<el-table-column label="操作" width="80">
						<template slot-scope="scope">
							<a href="javascript:;" v-if="scope.row.isEdit" @click="cancerChange(scope.$index, scope.row)" class="editBtn"><i
								 class="el-icon-circle-close-outline"></i></a>
							<a href="javascript:;" v-if="!scope.row.isEdit" @click="changeEdit('true', scope.$index)" class="editBtn"><i
								 class="el-icon-edit-outline"></i></a>
							<a href="javascript:;" v-if="!scope.row.isEdit" @click="pushListItem('del', scope.row.code)" class="editBtn"><i
								 class="el-icon-delete"></i></a>
							<a href="javascript:;" v-if="scope.row.isEdit" @click="saveChange(scope.row, scope.row.code)" class="editBtn"><i
								 class="el-icon-circle-check-outline"></i></a>
						</template>
					</el-table-column>
					<el-table-column type="expand" width="1">
			            <template slot-scope="props">
			               <popdialog :text="pvalue" :scope="row" :windowType="property" :popData="popData1" :formDatas="formData1"
			             :minMark="minMark" :checkMark="checkMark" :cacheData="cacheData" @cmmk="cmmk" @sWindow="sWindow(property, row.code)" @pushHead="pushHead"
			             @changeTab="changeTab" @closePanel="closePanel" @blockSearch="blockSearch(formInlines)"></popdialog>
			             </template>
		          	</el-table-column>
				</el-table>
			</div>

		</div>


	</div>
</template>
<script>
	import popdialog from '@/components/examine/examineModel/popModel/popdialog'
	export default {
		props: {
			formDatas: {
				type: Object
			},
			formInline: {
				type: Object
			},
	        popData: {
	          type: Object
	        }
		},
		created() {},
		data() {
			return {
				isEdit1: false,
				isEdit2: false,
				code: this.$route.params.id,
				formData: {},
				formData1: {},
				needAddsList: {
					"allelicDepth": "",
					"annotationTranscript": "",
					"bicClinicalSignificance": "",
					"cdnaChange": "",
					"chromosomeSite": "",
					"clinicalSignificancePrediction": "",
					"clinsig": "",
					"clinvarClinicalSignificance": "",
					"code": "",
					"cosmicId": "",
					"cosmicOverlappingMutations": "",
					"describe": "",
					"ensemblSoTerm": "",
					"excludedType": '',
					"fusionType": "",
					"gdnaChange": "",
					"gene": "",
					"geneType": "",
					"hasInOncokb": '',
					"hgmdCancer": "",
					"hgmdDmDp": "",
					"hgvsCodingDnaChange": "",
					"hgvsProteinChange": "",
					"hzInfo": "",
					"lovdClinicalSignificance": "",
					"mutationType": '',
					"mutationalLoad": "",
					"nature": "",
					"nccnCscoCount": '',
					"otherTranscripts": "",
					"parpInfluence": "",
					"projectCode": "",
					"proteinChange": "",
					"rsId": "",
					"siteNote": "",
					"transcriptType": '',
					"type": "",
					"utahClinicalSignificance": "",
					"variant": "",
					"variantClassification": "",
					"variantType": "mRNA表达",
					"wildType": '',
					'isAdd': true,
					"isEdit": true
				},
				restaurants: [],
				restaurantsList: [],
		        cacheData: {},
		        checkMark: 'base',
		        minMark: '1',
		        checkNum: false,
		        popData1: {
		          headList: [],
		          datas: {
		            cancers: {},
		            desc: '',
		            drugControls: [],
		            gene: '',
		            listReportVariant: [],
		            molecularNetworkImg: '',
		            panels: [],
		            pathwayInfos: [],
		            termsImg: ''
		          }
		        },
		        property: '',
		        pvalue: '',
		        row: {},
			}
		},
		methods: {
			cellClick(row, column, cell, event) {
		        // con
		        let that = this
		        that.property = column.property
		        that.pvalue = row[column.property]
		        that.row = row
		        if(column.property == 'variant' || column.property == 'gene') {
		          that.toogleExpand(row)
		        }
		      },
		      toogleExpand(row) {
		        let $table = this.$refs.table
		        this.formData1.list.map((item) => {
		          if (row.code != item.code) {
		            $table.toggleRowExpansion(item, false)
		          }
		        })
		        $table.toggleRowExpansion(row)
		      },
			showMsg(index, obj) {
				let that = this
				console.log(index)
				that.formData1.list.splice(index + 1, 0, obj)
				console.log(that.formData1.list)
			},
			changeEdit(val, index) {
				let that = this
				// that.formData1.list[index].isEdit = val == 'true' ?  true : false
				that.$set(that.formData1.list[index], 'isEdit', true)
			},
			cancerChange(index, scope) {
				let that = this
				if (scope.code == '') {
					that.formData1.list.splice(index, 1)
				} else {
					// that.formData1.list[index].isEdit = false
					that.$set(that.formData1.list[index], 'isEdit', false)
					// 重新给formData赋值    取消的时候，重置内容
					let n = Object.assign({}, that.formDatas)
					that.formData1 = n
				}
			},
			saveChange(vale, code) {
				let that = this
				if (vale.isAdd) {
					that.pushListItem('add', '0', that.formData1.list[0])
				} else {
					let n = {}
					n['variantType'] = vale.variantType
					n['variant'] = vale.variant
					n['code'] = code
					n['projectCode'] = that.code
					that.$emit('saveChange', n)
				}
			},
			goAdd() {
				let that = this
				that.formData1.list.splice(0, 0, that.needAddsList)
			},
			pushListItem(type, code) {
				// 添加，删除 的操作
				let that = this
				if (type == 'add') {
					if (that.formData1.list[0]['gene'] == '' || that.formData1.list[0]['variant'] == '') {
						that.$message({
							type: 'error',
							message: '添加失败：基因、突变不能为空',
							duration: 1000
						})
						return false
					} else {
						delete that.needAddsList.isAdd
						delete that.needAddsList.isEdit
						that.needAddsList['variantType'] = that.formData1.list[0].variantType
						that.$emit('pushListItem', type, code, that.needAddsList)
					}
				} else if (type == 'del') {
					that.$emit('pushListItem', type, code)
				}
			},
			blockSearch(formInline) {
				// 查询
				let that = this
				that.$emit('search', formInline)
			},
			querySearch(queryString, cb) {
				let restaurants = this.restaurants
				let results = queryString ? restaurants.filter(this.createFilter(queryString)) : restaurants
				// 调用 callback 返回建议列表的数据
				cb(results)
			},
			createFilter(queryString) {
				return (restaurant) => {
					return (restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0)
				}
			},
			sWindow(type, keyVal) {
				// 查询的类型   基因、疾病、药物    keyVal 是查询参数
				console.log('keyVal is :' + keyVal)
				let that = this
				that.$emit('sWindow', type, keyVal)
			},
			changeTab(item, i) {
				// 改变选中的选项
				let that = this
				for (let ec in that.popData1.headList) {
				  that.popData1.headList[ec].checkNum = false
				}
				// that.popData1.headList[i].checkNum = true
				that.$set(that.popData1.headList[i], 'checkNum', true)
				that.checkMark = item
				if (that.popData1.headList[i].data) {
				  that.cacheData = that.popData1.headList[i].data
				}
			},
			closePanel(i) {
				// 关闭可关闭的当前选项卡
				let that = this
				that.cacheData = {}
				that.popData1.headList.splice(i, 1)
				let n = parseInt(i) - 1
				let items = that.popData1.headList[n].mark
				that.changeTab(items, n)
			},
			cmmk(i) {
				this.minMark = i
			},
			pushHead(type, scope) {
				let that = this
				let n = {
				  canClose: true,
				  mark: type,
				  checkNum: false
				}
				if (type == 'disease') {
				  n['label'] = scope.name
				} else if (type == 'drug') {
				  n['label'] = scope.drugName ? scope.drugName : scope.drugEnName
				}
				let isneedinsert = true
				for (let i in that.popData1.headList) {
				  if (that.popData1.headList[i].label == n.label) {
				    isneedinsert = false
				    that.changeTab(that.popData1.headList[i].mark, i)
				    break
				  }
				}
				if (isneedinsert) {
				  n['data'] = scope
				  that.popData1.headList.push(n)
				  that.cacheData = n['data']
				  let xx = that.popData1.headList.length - 1
				  that.changeTab(type, xx)
				}
				// 临时内容
				console.log(that.cacheData)
				//跳转到当前选中的栏目
				that.checkMark = type
			},
		},
		watch: {
			formDatas: function(newVal, oldVal) {
				let that = this
				this.formData = newVal
				this.formData1 = JSON.parse(JSON.stringify(this.formData))
				for (let i in that.formData1.list) {
					// that.formData1.list[i]['isEdit'] = false
					that.$set(that.formData1.list[i], 'isEdit', false)
				}
			},
			popData: {
				handler: function(newVal, oldVal) {
					let that = this
					// 重设基本选择位置
					that.popData1 = newVal
				},
				deep: true,
				// immediate: true
			}
		},
		computed: {

		},
	    components: {
	      popdialog
	    }

	}
</script>
