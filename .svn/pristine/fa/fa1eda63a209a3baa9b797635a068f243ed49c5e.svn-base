<template>
  <div class="list">
    <div class="crumbs">
      <el-breadcrumb separator=">">
        <el-breadcrumb-item>> 基因解读</el-breadcrumb-item>
        <el-breadcrumb-item>添加项目</el-breadcrumb-item>
      </el-breadcrumb>
    </div>
    <el-steps :active="activeCheck" finish-status="success" align-center style="margin:20px 0 40px 0;">
      <el-step @click.native="activeCheck = index" style="cursor: pointer" :title="stepse.stepName" v-for="(stepse, index) in itemList" :key="index"></el-step>
    </el-steps>
    <div class="table-data" v-loading="loading" element-loading-text="拼命加载中" style="padding-bottom:40px;">
      <el-form :model="formData" :rules="rules" ref="formData" label-width="160px">
        <el-form-item label="检测的项目：">
          <!-- <el-col :span="8">
            <el-select v-model="formData.code" clearable placeholder="请选择" :disabled="selectOnly" @change="selectChange" style="width: 50%;">
              <el-option :label="item.businessName" :value="item.code" v-for="item in checkItems" :key="item.id"></el-option>
            </el-select>
          </el-col> -->
          <el-autocomplete
              clearable
              :disabled="selectOnly"
              class="inline-input"
              v-model="formData.code"
              :fetch-suggestions="querySearch"
              placeholder="请输入名称"
              :trigger-on-focus="true"
              @select="handleSelect"
              @blur="showSelectMessage"
              style="width: 16.7%;"
          ></el-autocomplete>
          <span style="color:#999; margin-left:20px;" v-if="selectLoading">Loading...</span>
        </el-form-item>
        <div class="squerItmes" v-for="(squerItmes, index) in itemList" :key="index" v-if="index === activeCheck" style="position:relative;">

          <div class="position_absolute" style="top: -60px;left: 30%;" v-if="squerItmes.stepName === '检测结果上传'">
            <el-upload
              :action="import_file_actionUrl"
              :before-upload="(file)=>import_before(file)"
              :on-success="(response, file, fileList)=>import_success(response, file, fileList)"
              :show-file-list="false"
              :headers="uploadHeader"
              :file-list="import_fileList">
              <el-button size="small" type="primary" :disabled="uploading">一键导入</el-button>
            </el-upload>
          </div>
          <el-form-item v-for="(itemer, keys) in squerItmes.blockFields" :label="itemer.element === 'list'? '' : itemer.label + '：'" v-show="itemer.type !== 'hidden'" :key="keys">
            <el-col :span="4" v-if="itemer.element === 'input' && itemer.type === 'text' && itemer.name != 'sourceOrderNo'">
              <el-input type="text" v-model="formData.dynamicInfo[itemer.name]"></el-input>
            </el-col>
            <el-col :span="4" v-if="itemer.element === 'input' && itemer.type === 'text' && itemer.name == 'sourceOrderNo'" style="position:relative; z-index:1;">
              <el-input type="text" v-model="formData.dynamicInfo[itemer.name]"></el-input>
              <el-button type="primary" size="small" @click="showreportList(1)" style="position:absolute; top:3px; right:-100px;">查看报告</el-button>
              <el-upload
                class="noup"
                :action="imageUploadUrl"
                list-type="picture-card"
                :file-list="fileListe"
                :on-preview="handlePictureCardPreview"
                :headers="uploadHeader">
                <i class="el-icon-plus"></i>
              </el-upload>
            </el-col>
            <el-col :span="4" v-if="itemer.element === 'input' && itemer.type === 'hidden'">
              <el-input type="text" v-model="formData.dynamicInfo[itemer.name]"></el-input>
            </el-col>
            <el-col :span="4" v-if="itemer.element === 'input' && itemer.type === 'autocomplete'">
              <el-autocomplete
                clearable
                class="inline-input"
                v-model="formData.dynamicInfo[itemer.name]"
                :fetch-suggestions="(queryString, cb)=> autocompleteList(queryString, cb, itemer.name)"
                placeholder="请选择"
                :trigger-on-focus="true"
                @select="(item)=>autocompleteSelect(item, itemer.name)">
                <template slot-scope="{ item }">
                  <div class="name">{{ item.businessName }}</div>
                </template>
            </el-autocomplete>
            </el-col>
            <el-col :span="4" v-if="itemer.element === 'input' && itemer.type === 'file'">
              <el-upload
                :data="updata"
                :action="imgUploadUrl"
                :on-remove="handleRemove"
                :before-upload="beforeUpload"
                :on-success="handleSuccess"
                :headers="uploadHeader"
                :file-list="fileList"
                >
                <el-button size="small" type="primary">点击上传</el-button>
                <div slot="tip" class="el-upload__tip">只能上传不超过500Mb的文件</div>
              </el-upload>
            </el-col>
            <!-- 日期类型date -->
            <el-col :span="8" v-if="itemer.element === 'input' && itemer.type === 'date'">
              <el-input type="text" v-model="formData.dynamicInfo[itemer.name]" placeholder="" style="width:50%"></el-input>
            </el-col>
            <!-- select选择 -->
            <el-col :span="8" v-if="itemer.element === 'select' && itemer.name === 'sample_type'">
              <el-select v-model="formData.dynamicInfo[itemer.name]" clearable placeholder="请选择" style="width: 50%;" multiple>
                <el-option :label="item.label" :value="item.label" v-for="(item, index) in itemer.initValueJsonObject" :key="index"></el-option>
              </el-select>
            </el-col>
            <el-col :span="8" v-if="itemer.element === 'select' && itemer.name !== 'sample_type'">
              <el-select v-model="formData.dynamicInfo[itemer.name]" clearable placeholder="请选择" style="width: 50%;">
                <el-option :label="item.label" :value="item.value" v-for="(item, index) in itemer.initValueJsonObject" :key="index"></el-option>
              </el-select>
            </el-col>
            <!-- 增加性别单选 -->
            <el-col :span="8" v-if="itemer.element === 'radio' && itemer.name === 'gender'">
              <el-radio v-model="formData.dynamicInfo[itemer.name]" :label="1">男</el-radio>
              <el-radio v-model="formData.dynamicInfo[itemer.name]" :label="2">女</el-radio>
            </el-col>
            <!-- 文本框 -->
            <el-col :span="8" v-if="itemer.element === 'textarea' || itemer.name === 'address'">
              <el-input type="textarea" :rows="2" v-model="formData.dynamicInfo[itemer.name]"></el-input>
            </el-col>
            <!-- 表格 -->
            <el-col :span="20" v-if="itemer.element === 'list' && itemer.name !== 'gene_msi' && itemer.name !== 'gene_copy' && itemer.name !== 'gene_expression' && itemer.name !== 'gene_amplification' && itemer.name !== 'gene_tumor_burden' && itemer.name !== 'gene_fusion' && itemer.name !== 'dna_quality_Inspection' && itemer.name !== 'rna_quality_Inspection'" style="position:relative">
              <h2 class="squerItmes_h2">{{ itemer.label }}</h2>
              <el-button type="success" size="mini" class="position_absolute" @click="objDataAdd(itemer.name)" v-if="itemer.element === 'dna_quality_Inspection' && itemer.name !== 'rna_quality_Inspection'">+</el-button>
              <el-table
                :data="formData.dynamicInfo[itemer.name]"
                border
                style="width: 100%">
                <el-table-column v-for="(colums, keys, index) in itemer.initValueJsonObject[0]" :prop="keys" :label="itemer.itemJsonValue[index].name" :key="index">
                  <template slot-scope="scope">
                    <el-input type="text" v-model="scope.row[keys]" placeholder=""></el-input>
                  </template>
                </el-table-column>
                <el-table-column label="　" width="60" v-if="itemer.element === 'dna_quality_Inspection' && itemer.name !== 'rna_quality_Inspection'">
                  <template slot-scope="scope">
                    <el-button type="danger" size="mini" plain @click="objDataRemove(itemer.name, scope.$index)">-</el-button>
                  </template>
                </el-table-column>
              </el-table>
            </el-col>
            <!--dna/rna质检-->
            <el-col :span="20" v-if="itemer.name === 'dna_quality_Inspection' || itemer.name === 'rna_quality_Inspection'" style="position:relative">
              <h2 class="squerItmes_h2">{{ itemer.label }}</h2>
              <el-table
                :data="formData.dynamicInfo[itemer.name]"
                border
                style="width: 100%">
                <el-table-column v-for="(colums, keys, index) in itemer.initValueJsonObject[0]" :prop="keys" :label="itemer.itemJsonValue[index].name" :key="index">
                  <template slot-scope="scope">
                    <el-input type="text" v-model="scope.row[keys]" placeholder=""></el-input>
                  </template>
                </el-table-column>
              </el-table>
            </el-col>
            <!--基因微卫星不稳定-->
            <el-col :span="20" v-if="itemer.element === 'list' && itemer.name === 'gene_msi'" style="position:relative">
              <h2 class="squerItmes_h2">{{ itemer.label }}</h2>
              <table class="like_elTable">
                <tr>
                  <th colspan="2">检测项</th>
                  <th colspan="2">检测结果</th>
                </tr>
                <tr v-for="(items, key, index) in  formData.dynamicInfo.gene_msi[0].results[0]" :key="key">
                  <td rowspan="5" v-if="index === 0"><p>微卫星不稳定</p>MSI</td>
                  <td> {{ key }} </td>
                  <td>
                    <el-select v-model="formData.dynamicInfo.gene_msi[0].results[0][key]" clearable placeholder="请选择" @change="geneMsiChange">
                      <el-option :label="item.label" :value="item.value" v-for="(item, index) in yinyang" :key="index"></el-option>
                    </el-select>
                  </td>
                  <td rowspan="5" v-if="index === 0">
                    <el-input type="text" v-model="formData.dynamicInfo.gene_msi[0].msi" disabled style="border:none"></el-input>
                  </td>
                </tr>
                <tr v-for="(items, key, index) in  formData.dynamicInfo.gene_msi[0].results[1]" :key="key">
                  <td rowspan="9" v-if="index === 0"><p>错配修复</p>MMR</td>
                  <td> {{ key }} </td>
                  <td>
                    <el-select v-model="formData.dynamicInfo.gene_msi[0].results[1][key]" clearable placeholder="请选择" @change="geneMmrChange">
                      <el-option :label="item.label" :value="item.value" v-for="(item, index) in yinyang" :key="index"></el-option>
                    </el-select>
                  </td>
                  <td rowspan="9" v-if="index === 0">
                      <el-input type="text" v-model="formData.dynamicInfo.gene_msi[0].mmr" disabled style="border:none"></el-input>
                  </td>
                </tr>
              </table>
            </el-col>
            <el-col :span="20" v-if="itemer.element === 'list' && itemer.name === 'gene_tumor_burden'"  style="position:relative">
              <h2 class="squerItmes_h2">{{ itemer.label }}</h2>
              <el-table
                :data="formData.dynamicInfo[itemer.name]"
                border
                style="width: 100%">
                <el-table-column v-for="(colums, keys, index) in itemer.initValueJsonObject[0]" :prop="keys" :label="itemer.itemJsonValue[index].name" :key="index">
                    <template slot-scope="scope">
                      <el-input type="text" v-model="scope.row[keys]" placeholder="" @change="changeTubian(scope.$index)" v-if="index === 1"></el-input>
                      <el-select v-model="scope.row[keys]" clearable placeholder="请选择" style="width: 100%;" v-else-if="index === 2">
                        <el-option :label="item.label" :value="item.value" v-for="(item, indexeeee) in gene_tumor_burden_Selection" :key="indexeeee"></el-option>
                      </el-select>
                      <el-input type="text" v-model="scope.row[keys]" placeholder="" :disabled="index === 0" v-else></el-input>
                    </template>
                </el-table-column>
              </el-table>
            </el-col>
            <!--基因融合-->
            <el-col :span="20" v-if="itemer.element === 'list' && itemer.name === 'gene_fusion'"  style="position:relative">
              <h2 class="squerItmes_h2">{{ itemer.label }}</h2>
              <el-button type="success" size="mini" class="position_absolute" @click="objDataAdd(itemer.name)" :disabled="uploading">+</el-button>
              <el-button type="success" size="mini" class="position_absolute" :disabled="uploading" style="right:80px" @click="showDialog(itemer.name, 'fusion', itemer.label)">批量导入</el-button>
              <el-table
                :data="formData.dynamicInfo[itemer.name]"
                border
                style="width: 100%">
                <el-table-column v-for="(colums, keys, index) in itemer.initValueJsonObject[0]" :prop="keys" :label="itemer.itemJsonValue[index].name" :key="index">
                    <template slot-scope="scope">
                      <el-input type="text" v-model="scope.row[keys]" placeholder="" v-if="index !== 1"></el-input>
                      <el-select v-model="scope.row[keys]" clearable placeholder="请选择" style="width: 100%;" v-if="index === 1">
                        <el-option :label="'融合' + item.label" :value="'融合' + item.value" v-for="(item, indexeeee) in yinyang" :key="indexeeee"></el-option>
                      </el-select>
                    </template>
                </el-table-column>
                <el-table-column label="　" width="60">
                  <template slot-scope="scope">
                    <el-button type="danger" size="mini" plain @click="objDataRemove(itemer.name, scope.$index)">-</el-button>
                  </template>
                </el-table-column>
              </el-table>
            </el-col>
            <el-col :span="20" v-if="itemer.element === 'list' && itemer.name === 'gene_expression'"  style="position:relative">
              <h2 class="squerItmes_h2">{{ itemer.label }}</h2>
              <el-button type="success" size="mini" class="position_absolute" @click="objDataAdd(itemer.name)">+</el-button>
              <el-table
                :data="formData.dynamicInfo[itemer.name]"
                border
                style="width: 100%">
                <el-table-column v-for="(colums, keys, index) in itemer.initValueJsonObject[0]" :prop="keys" :label="itemer.itemJsonValue[index].name" :key="index">
                    <template slot-scope="scope">
                      <el-input type="text" v-model="scope.row[keys]" placeholder="" v-if="index === 0"></el-input>
                      <el-select v-model="scope.row[keys]" clearable placeholder="请选择" style="width: 100%;" v-if="index === 1">
                        <el-option :label="item.label" :value="item.value" v-for="(item, indexeeee) in gene_expression_Selection0" :key="indexeeee"></el-option>
                      </el-select>
                      <el-select v-model="scope.row[keys]" clearable placeholder="请选择" style="width: 100%;" v-if="index === 2">
                        <el-option :label="item.label" :value="item.value" v-for="(item, indexeeee) in gene_expression_Selection" :key="indexeeee"></el-option>
                      </el-select>
                    </template>
                </el-table-column>
                <el-table-column label="　" width="60">
                  <template slot-scope="scope">
                    <el-button type="danger" size="mini" plain @click="objDataRemove(itemer.name, scope.$index)">-</el-button>
                  </template>
                </el-table-column>
              </el-table>
            </el-col>
            <!--基因扩增-->
            <el-col :span="20" v-if="itemer.element === 'list' && itemer.name === 'gene_amplification'"  style="position:relative">
              <h2 class="squerItmes_h2">{{ itemer.label }}</h2>
              <el-button type="success" size="mini" class="position_absolute" @click="objDataAdd(itemer.name)" :disabled="uploading">+</el-button>
              <el-button type="success" size="mini" class="position_absolute" style="right:80px" :disabled="uploading" @click="showDialog(itemer.name, 'amplification', itemer.label)">批量导入</el-button>
              <el-table
                :data="formData.dynamicInfo[itemer.name]"
                border
                style="width: 100%">
                <el-table-column v-for="(colums, keys, index) in itemer.initValueJsonObject[0]" :prop="keys" :label="itemer.itemJsonValue[index].name" :key="index">
                    <template slot-scope="scope">
                      <el-input type="text" v-model="scope.row[keys]" placeholder="" v-if="index !== 1"></el-input>
                      <el-select v-model="scope.row[keys]" clearable placeholder="请选择" style="width: 100%;" v-if="index === 1">
                        <el-option :label="item.label" :value="item.value" v-for="(item, indexeeee) in gene_amplification_Selection" :key="indexeeee"></el-option>
                      </el-select>
                    </template>
                </el-table-column>
                <el-table-column label="　" width="60">
                  <template slot-scope="scope">
                    <el-button type="danger" size="mini" plain @click="objDataRemove(itemer.name, scope.$index)">-</el-button>
                  </template>
                </el-table-column>
              </el-table>
            </el-col>
            <!-- 基因拷贝数变异 -->
            <el-col :span="20" v-if="itemer.element === 'list' && itemer.name === 'gene_copy'"  style="position:relative">
              <h2 class="squerItmes_h2">{{ itemer.label }}</h2>
              <el-button type="success" size="mini" class="position_absolute" style="right:80px" :disabled="uploading" @click="showDialog(itemer.name, 'copy')">批量导入</el-button>
              <el-button type="success" size="mini" class="position_absolute" @click="objDataAdd(itemer.name)" :disabled="uploading">+</el-button>
              <el-table
                :data="formData.dynamicInfo[itemer.name]"
                border
                style="width: 100%">
                <el-table-column v-for="(colums, keys, index) in itemer.initValueJsonObject[0]" :prop="keys" :label="itemer.itemJsonValue[index].name" :key="index">
                    <template slot-scope="scope">
                      <el-input type="text" v-model="scope.row[keys]" placeholder="" v-if="index !== 5"></el-input>
                      <el-select v-model="scope.row[keys]" clearable placeholder="请选择" style="width: 100%;" v-if="index === 5">
                        <el-option :label="item.label" :value="item.value" v-for="(item, indexeeee) in gene_copy_Selection" :key="indexeeee"></el-option>
                      </el-select>
                    </template>
                </el-table-column>
                <el-table-column label="　" width="60">
                  <template slot-scope="scope">
                    <el-button type="danger" size="mini" plain @click="objDataRemove(itemer.name, scope.$index)">-</el-button>
                  </template>
                </el-table-column>
              </el-table>
            </el-col>
          </el-form-item>
          <el-form-item v-for="(itemere, kkk) in squerItmes.programVos" :label="itemere.uploadTitle + '：'" v-if="squerItmes.programVos !== null" :key="kkk">
            <el-col :span="4">
              <el-upload
                :data="updata"
                :action="imgUploadUrl"
                :on-remove="(file, fileList)=>handleRemove(file, fileList, itemere.code)"
                :before-upload="(file)=>beforeUpload(file, itemere.code)"
                :on-success="(response, file, fileList)=>handleSuccess(response, file, fileList, itemere.code)"
                :headers="uploadHeader"
                :file-list="fileList"
                >
                <el-button size="small" type="primary">点击上传</el-button>
                <div slot="tip" class="el-upload__tip">{{itemere.uploadDescription}}</div>
              </el-upload>
              <div>
                <p>
                  <span style="display:inline-block; color:#777;">深度：</span>
                  <span style="display:inline-block; width:calc(100% - 10em)">
                    <el-input v-model="itemere.dp"></el-input>
                  </span>
                </p>
                <p>
                  <span style="display:inline-block; color:#777;">变异检测质量值：</span>
                  <span style="display:inline-block; width:calc(100% - 10em)">
                    <el-input v-model="itemere.qual"></el-input>
                  </span>
                </p>
              </div>
            </el-col>
          </el-form-item>
        </div>
        <el-form-item>
          <el-button @click="stepPrev" v-if="activeCheck > 0">上一步</el-button>
          <el-button type="primary" :loading="isLoading" @click="sub('formData')" v-if="activeCheck === itemList.length - 1">
              {{ isLoading ? '加载中...' : '提交' }}
          </el-button>
          <el-button @click="stepNext" v-if="activeCheck < itemList.length - 1">下一步</el-button>
        </el-form-item>
      </el-form>
    </div>
    <el-dialog :visible.sync="dialogVisible">
      <div style="margin: 0px 0 20px 0px; max-height:360px; overflow:auto;">
        <el-checkbox-group v-model="checkGroup" size="mini" @change="handleCheckedCitiesChange">
          <el-checkbox class="setWidth" v-for="(item, index) in geneArray" :label="item" :key="index" border>{{ item }}</el-checkbox>
        </el-checkbox-group>
      </div>
      <div v-if="modeName === 'fusion' || modeName === 'amplification'">
        <template>
          <el-radio v-model="plvalue" label="阴性">批量阴性</el-radio>
          <el-radio v-model="plvalue" label="阳性">批量阳性</el-radio>
        </template>
      </div>
      <el-checkbox :indeterminate="isIndeterminate" v-model="checkAll" @change="handleCheckAllChange" style="margin-left:10px;">全选</el-checkbox>
      <el-button type='info' size="medium" @click="dialogVisible = false,checkGroup = []">取消</el-button>
      <el-button type="primary" size="medium" @click="objDataAddArray(inputName)">导入</el-button>
    </el-dialog>
    

    <!--查询订单弹窗-->
    <el-dialog title="订单查询" :visible.sync="getSelectOrderDialog" width="80%">
      <div class="search-wrapper">
        <el-form :inline="true" :model="getSelectFrom" class="demo-form-inline" style="position:relative">
          <el-form-item label="订单编号：">
            <el-input v-model="getSelectFrom.orderNo" placeholder="请输入样本编号"></el-input>
          </el-form-item>
          <el-form-item label="受检人：">
            <el-input v-model="getSelectFrom.name" placeholder="请输入受检人名"></el-input>
          </el-form-item>
          <el-form-item>
            <el-button type="primary" :loading="getSelectFrom.loading" @click="showreportList(1)">
              {{ getSelectFrom.loading ? '正在查询' : '查询' }}
            </el-button>
          </el-form-item>
        </el-form>
      </div>
      <div class="clinicalTrialsData">
        <el-table :data="orderData.data.list" v-loading="loading" border style="width: 100%">
          <el-table-column label="订单号" prop="id" width="200">
          </el-table-column>
          <el-table-column label="受检人" prop="applyName">
            <template slot-scope="scope">
              {{ JSON.parse(scope.row.applyInfoJson).applyName }}
            </template>
          </el-table-column>
          <el-table-column label="性别" prop="xx">
            <template slot-scope="scope">
              {{ JSON.parse(scope.row.applyInfoJson).applySex === 'man' ? '男' : '女' }}
            </template>
          </el-table-column>
          <el-table-column label="检测项目" prop="xx">
            <template slot-scope="scope">
              <!-- {{ JSON.parse(scope.row.productJson) }} -->
              <span class="dunhao" v-for="(item, i) in JSON.parse(scope.row.productJson)" :key="i">{{ item.name}}</span>
            </template>
          </el-table-column>
          <el-table-column label="日期" :formatter="dateFormat" prop="createTime">
          </el-table-column>
          <el-table-column label="操作" width="100">
            <template slot-scope="scope">
              <el-button type="success" size="small" v-loading='addLoading' @click="checkListItem(scope.row)">选择</el-button>
            </template>
          </el-table-column>
        </el-table>
      </div>
      <pager class="mmpPager" :current-page="getSelectFrom.currentPage" :pageSize="getSelectFrom.pageSize" :total-count="getSelectFrom.total"
             v-on:handleCurrentChange="(val)=>showreportList(val)"></pager>
    </el-dialog>

    <el-dialog :visible.sync="ImgVisible" width="80%" class="xeeeee">
      <img style="max-width:100%; display:block; margin:0 auto;" :width="imgW" :src="dialogImageUrl" :class="{'imgs rotate0': rotateNum == 0,'imgs rotate1': rotateNum == 1,'imgs rotate2': rotateNum == 2,'imgs rotate3': rotateNum == 3}" ref="img" alt="">
      <br/>
      <div style="text-align:center;">
        <div class="qunimade">
          <span @click="addWidth()">+</span>
          <span>{{ imgW }}</span>
          <span @click="removeWidth()">-</span>
        </div>
        <small style="color:#999;  margin: 0 20px 0 -20px; font-size:12px;">(100%最大，30%最小)</small>
        <div class="qunimade">
          <i class="xz" @click="leftRotate"><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536750824863&di=17fb61027234ae4f944c68315041e7da&imgtype=0&src=http%3A%2F%2Fbpic.588ku.com%2Felement_origin_min_pic%2F01%2F48%2F37%2F7357442316d0691.jpg" alt="左旋转"></i>
          <i class="xz" @click="rightRotate"><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536750824863&di=17fb61027234ae4f944c68315041e7da&imgtype=0&src=http%3A%2F%2Fbpic.588ku.com%2Felement_origin_min_pic%2F01%2F48%2F37%2F7357442316d0691.jpg" alt="右旋转"></i>
        </div>
      </div>
    </el-dialog>
  </div>
</template>
<script>
  import URL from '@/common/js/URL.js'
  import Pager from '@/components/common/pager'
  import axios from 'axios'
  import moment from 'moment'
  export default {
    created () {
      let that = this
      this.getProcessList()
      // this.getCategoryList()
    },
    data () {
      return {
        import_file_actionUrl: URL.api_name + 'cloud/uploadGeneMutation',
        imgUploadUrl: URL.api_name + 'cloud/upload_project',
        fileList: [],
        formData: {
          code: '',
          businessName: '',
          businessCode: '',
          flowCode: '',
          dynamicInfo: {
            gender: 1,
            programInfos:[{
              programCode: "",
              qual: '',
              dp: '1111'
            }]
          }
        },
        plvalue: '',
        modeName: '',
        modeNames: '',
        selectLoading: false,
        isSelect: false,
        steps: 0,
        isChecked: false,
        selectOnly: false,
        activeCheck: 0,
        updata: {
          flowCode: ''
        },
        gene_tumor_burden_Selection: [{
          label: '高负荷',
          value: '高负荷'
        },{
          label: '中等负荷',
          value: '中等负荷'
        },{
          label: '低负荷',
          value: '低负荷'
        }],
        gene_amplification_Selection: [{
          label: '扩增阳性',
          value: '扩增阳性'
        },{
          label: '扩增阴性',
          value: '扩增阴性'
        }],
        gene_copy_Selection: [{
          label: '拷贝数正常',
          value: '拷贝数正常'
        },{
          label: '拷贝数增加',
          value: '拷贝数增加'
        },{
          label: '拷贝数缺失',
          value: '拷贝数缺失'
        }],
        gene_expression_Selection: [{
          value: '正常表达',
          label: '正常表达'
        }, {
          value: '表达阴性',
          label: '表达阴性'
        }, {
          value: '低表达',
          label: '低表达'
        }, {
          value: '高表达',
          label: '高表达'
        }],
        gene_expression_Selection0: [{
          value: 'mRNA表达',
          label: 'mRNA表达'
        }, {
          value: '蛋白表达',
          label: '蛋白表达'
        }],
        yinyang: [{
          value: '阴性',
          label: '阴性'
        }, {
          value: '阳性',
          label: '阳性'
        }],
        import_fileList: [],
        dialogImageUrl: '',
        dialogVisible: false,
        checkAll: false,
        isIndeterminate: true,
        geneArray: [],
        checkGroup: [],
        inputName: '',
        rules: {
          flowCode: [
            { required: true, message: '请选择检测项目', trigger: 'change' }
          ]
        },
        uploading: false,
        checkItems: [],
        itemList: [],
        totalCount: 0,
        isLoading: false,
        loading: false,
        businessNameList: [],
        cacheData: {
          cache: ''
        },
        canNext: false,
        getSelectFrom: {
          orderNo: '',
          name: '',
          currentPage: 1,
          pageSize: 10,
          total: 0
        },
        imageUploadUrl: '',
        getSelectOrderDialog: false,
        orderData: {
          data: {
            list: []
          },
        },
        fileListe: [],
        rotateNum: 0,
        imgW: "30%",
        addLoading: false,
        ImgVisible: false
      }
    },
    methods: {
      getProcessList () {
        // 1、进图先获取可用流程列表
        var that = this
        axios.get(URL.api_name + 'cloud/project/business_list').then(function (res) {
          if (res.data.code === '100') {
            that.checkItems = res.data.data
            if(that.checkItems.length > 0){
              for(let i = 0;i < that.checkItems.length;i++){
                that.businessNameList.push({
                  value: that.checkItems[i].businessName,
                  code: that.checkItems[i].code
                })
              }
            }
            // console.log(that.checkItems)
            // console.log(that.businessNameList)
          }
        }, function (error) {
          that.$message({
            type: 'error',
            message: '查询失败',
            duration: 1000
          })
        })
      },
      selectChange (item) {
        // 2、选择后获取动态表单列表
        let that = this
        // that.steps = 0
        this.activeCheck = 0
        that.selectOnly = true
        for (let n = 0; n < that.checkItems.length; n++) {
          if (that.formData.code === that.checkItems[n].code) {
            that.formData.businessCode = that.checkItems[n].code
            that.formData.businessName = that.checkItems[n].businessName
          }
        }
        // let url = "./static/report.json"
        let url = URL.api_name + 'cloud/project/getBusinesInfo'
        axios.get(url, {
          params: {
            code: that.formData.code
          }
        }).then(function (res) {
          // console.log('x1OK')
          // alert('xwerwer')
          if (res.data.code === '100') {
            that.itemList = res.data.data
            that.formData.dynamicInfoDto = {}
            // 遍历所有步骤
            for (let i = 0; i < that.itemList.length; i++) {
              // 遍历步骤下的条目
              for (let n = 0; n < that.itemList[i].blockFields.length; n++) {
                let keyName = that.itemList[i].blockFields[n].name
                // 判断如果是自动补全系列
                if (that.itemList[i].blockFields[n].type === 'autocomplete') {
                  let cacheName = that.itemList[i].blockFields[n].name
                  that.cacheData[cacheName] = []
                  that.cacheData[cacheName] = that.itemList[i].blockFields[n].businessList
                }
                if (that.itemList[i].blockFields[n].element === 'list') {
                  that.formData.dynamicInfoDto[keyName] = that.itemList[i].blockFields[n].initValueJsonObject
                  that.formData.dynamicInfo[keyName] = that.itemList[i].blockFields[n].initValueJsonObject

                } else if (that.itemList[i].blockFields[n].element === 'select') {
                  // 如果
                  that.formData.dynamicInfoDto[keyName] = ''
                } else {
                  that.formData.dynamicInfoDto[keyName] = ''
                }
              }
              // 遍历步骤下的上传文件组件
              // console.log()
              if (that.itemList[i].programVos !== null) {
                let objChache = []
                for (let s = 0; s < that.itemList[i].programVos.length; s++) {
                  // upfile组
                  let n = that.itemList[i].programVos[s].code
                  that.formData[n] = []
                  objChache.push({
                    programCode: "",
                    qual: '100',
                    dp: '30'
                  })
                  // console.log(that.itemList[i].programVos[s].qual + '///' + that.itemList[i].programVos[s].dp)
                  that.itemList[i].programVos[s].qual = '100'
                  that.itemList[i].programVos[s].dp = '30'
                }
                // 上传附件里额外添加的两个input，得tm跟随上船组件的数目
                that.formData.dynamicInfo.programInfos = objChache
              }
            }
            that.updata.flowCode = that.formData.flowCode
            that.formData.dynamicInfo.gender = 1
            that.formData.dynamicInfoDto.gender = 1
            // dynamicInfoDto刷新显示视图list   dynamicInfo绑定item对应值
            that.formData.dynamicInfo = that.formData.dynamicInfoDto

            // 获取列表后给msi mmr 设置默认值 3/14号需求更改，修改默认值为空
            // that.formData.dynamicInfo.gene_msi[0].msi = 'MSS'
            // that.formData.dynamicInfo.gene_msi[0].mmr = 'pMMR'
            that.formData.dynamicInfo.gene_msi[0].msi = ''
            that.formData.dynamicInfo.gene_msi[0].mmr = ''
            // console.log(that.formData.dynamicInfo)
          }
        }, function (error) {
          // console.log(error)
          that.$message({
            type: 'error',
            message: '查询失败',
            duration: 1000
          })
        })
      },
      geneMsiChange() {
        let that = this
        // 根据阳性、阴性的个数，判断Msi的值
        let flag = 0
        let obj = that.formData.dynamicInfo.gene_msi[0]
        // console.log(that.formData.dynamicInfo.gene_msi[0].results[0])
        for(var key in obj.results[0]){
          if(obj.results[0][key] === '阳性'){
            flag++
          }
        }
        if(flag >= 2){
          that.formData.dynamicInfo.gene_msi[0].msi = 'MSI-H'
        }else if(flag == 1){
          that.formData.dynamicInfo.gene_msi[0].msi = 'MSI-L'
        }else {
          that.formData.dynamicInfo.gene_msi[0].msi = 'MSS'
        }
        flag = 0
      },
      geneMsiChange() {
        let that = this
        // 根据阳性、阴性的个数，判断Msi的值
        let flag = 0
        let obj = that.formData.dynamicInfo.gene_msi[0]
        // console.log(that.formData.dynamicInfo.gene_msi[0].results[0])
        for(var key in obj.results[0]){
          if(obj.results[0][key] === '阳性'){
            flag++
          }
        }
        if(flag >= 2){
          that.formData.dynamicInfo.gene_msi[0].msi = 'MSI-H'
        }else if(flag == 1){
          that.formData.dynamicInfo.gene_msi[0].msi = 'MSI-L'
        }else {
          that.formData.dynamicInfo.gene_msi[0].msi = 'MSS'
        }
        flag = 0
      },
      geneMmrChange() {
        let that = this
        // 根据阳性、阴性的个数，判断Mmr的值
        let flag = 0
        let obj = that.formData.dynamicInfo.gene_msi[0]
        // console.log(that.formData.dynamicInfo.gene_msi[0].results[1])
        for(var key in obj.results[1]){
          if(obj.results[1][key] === '阳性'){
            flag++
          }
        }
        if(flag >= 1){
          that.formData.dynamicInfo.gene_msi[0].mmr = 'dMMR'
        }else {
          that.formData.dynamicInfo.gene_msi[0].mmr = 'pMMR'
        }
        flag = 0
      },
      formatTime (value, name) {
        this.formData.dynamicInfo[name] = value
        // console.log(name)
        // console.log(value)
      },
      sub (formName) {
        let that = this
        // console.log(that.formData)
        // return false
        // 遍历对象进行判断表格
        // for( var i in that.formData.dynamicInfoDto) {
        //   console.log( i + ":::" + that.formData.dynamicInfoDto[i])
        // }

        let n = that.itemList.length - 1
        that.formData.dynamicInfo.programInfos = []
        that.formData.dynamicInfoDto.programInfos = []
        for (let i = 0; i < that.itemList[n].programVos.length; i++) {
          that.formData.dynamicInfo["programInfos"].push({
            programCode: that.itemList[n].programVos[i].code,
            qual: that.itemList[n].programVos[i].qual,
            dp: that.itemList[n].programVos[i].dp
          })
        }
        console.log(that.formData)
        that.$refs[formName].validate((valid) => {
          // console.log(that.$refs[formName])
          if (valid) {
            // 如果验证通过，即提交
            axios.post(URL.api_name + 'cloud/add_project', that.formData).then((res) => {
              that.isLoading = false
              if (res.data.code === '100') {
                that.$message({
                  message: res.data.message,
                  type: 'success',
                  onClose: function () {
                  }
                })
                that.$router.push({
                  path: '/service/1'
                })
              } else {
                that.$message({
                  message: res.data.message,
                  type: 'error'
                })
              }
            })
            // that.isLoading = false
          } else {
            // 验证失败...
            // console.log('error submit!!')
            return false
          }
        })
      },
      beforeUpload (file, code) {
        let that = this
        if (that.formData[code].length > 0) {
          that.$message({
            type: 'error',
            message: '最多上传一个vcf文件',
            duration: 1000
          })
          return false
        }
        this.isLoading = true
      },
      handleSuccess (response, file, fileList, code) {
        let that = this
        // console.log('success is running')
        this.fileList = fileList
        if (response.code === '100') {
          // console.log('xeeee')
          this.formData[code].push({
            file_name: response.data.fileName,
            file_path: response.data.filePath,
            file_size: response.data.fileSize,
            file_url: response.data.fileDownUrl,
            program_code: code
          })
        } else {
          this.fileList = []
        }
        that.isLoading = false
      },
      stepNext () {
        // let that = this
        this.activeCheck++
        // console.log(this.itemList.length)
      },
      stepPrev () {
        this.activeCheck--
      },
      handleRemove (file, fileList, code) {
        this.fileList = fileList
        let that = this
        if (this.fileList.length > 0) {
        } else {
          that.formData[code] = []
        }
      },
      objDataRemove (partName, index) {
        let that = this
        // 删除一格
        // part.infos.splice(index, 1)
        // alert(partName + '-=-' + index)
        if (that.formData.dynamicInfoDto[partName].length > 1) {
          that.formData.dynamicInfoDto[partName].splice(index, 1)
        } else {
          that.$message({
            type: 'error',
            message: '只剩一条啦，再删没有啦',
            duration: 1000
          })
        }
      },
      objDataAdd (partName) {
        let that = this
        let xx = {}
        for (let n in that.formData.dynamicInfoDto[partName][0]) {
          xx[n] = ''
          // xx.push(that.formData.dynamicInfoDto[partName][n]: '')
        }
        that.formData.dynamicInfoDto[partName].push(xx)
      },
      showDialog (partName, modeName, label) {
        let that = this
        // 批量赋值(基因扩增和融合)
        if (label !== undefined) {
          that.modeNames = label.substring(2)
        }
        // pvalue： 初始化 "批量阴性" "批量阳性""
        that.plvalue = ''
        that.modeName = modeName
        that.inputName = partName
        that.dialogVisible = true
        axios.get(URL.api_name + 'cloud/project/importGene', {
          params: {
            option: modeName,
            code: that.formData.businessCode
          }
        }).then((res) => {
          if (res.data.code === '100') {
            that.geneArray = res.data.data
            that.checkGroup = res.data.data
            that.isIndeterminate = false
            that.checkAll = true
          } else {
            that.$message({
              message: res.data.message,
              type: 'error'
            })
          }
        })
      },
      handleCheckAllChange (val) {
        let that = this
        this.checkGroup = val ? that.geneArray : []
        this.isIndeterminate = false
      },
      handleCheckedCitiesChange (value) {
        let checkedCount = value.length
        let that = this
        that.checkAll = (checkedCount === that.geneArray.length)
        that.isIndeterminate = (checkedCount > 0 && checkedCount < that.geneArray.length)
      },
      objDataAddArray (partName) {
        let that = this
        // 如果添加的数量为0，无反应
        if (that.checkGroup.length < 1) {
          return false
        }
        // 导入内容
        for (let i = 0; i < that.checkGroup.length; i++) {
          let xx = {}
          for (let n in that.formData.dynamicInfoDto[partName][0]) {
            xx[n] = n === 'gene' ? that.checkGroup[i] : ''
          }
          xx[that.modeName] = that.plvalue === '' ? '' : that.modeNames + that.plvalue
          that.formData.dynamicInfoDto[partName].push(xx)
        }
        // console.log(that.formData.dynamicInfoDto[partName])
        that.dialogVisible = false
        // 检查当前被添加的表里有没有空行，有就删除掉空行
        for (let s = 0; s < that.formData.dynamicInfoDto[partName].length; s++) {
          let isNull = 0
          let allObj = 0
          for (let n in that.formData.dynamicInfoDto[partName][s]) {
            allObj++
            that.formData.dynamicInfoDto[partName][s][n] === '' ? isNull++ : isNull
          }
          // console.log(isNull)
          // console.log(allObj)
          if (isNull === allObj) {
            that.formData.dynamicInfoDto[partName].splice(s, 1)
          }
        }
      },
      //  添加联想功能
      showSelectMessage() {
        let that = this
        // 没输入内容的时候，不进行查询比对
        if (that.formData.code === '') {
          return false
        }
        that.selectOnly = true
        that.selectLoading = true
        setTimeout(function() {
          that.asdasdasd()
        }, 1500)
      },
      asdasdasd() {
        let that = this
        if (that.isSelect === true) {
          return false
        }
        // alert(that.isSelect)
        let bool = ''
        for(let i = 0; i < that.checkItems.length - 1; i++){
          if(that.formData.code === that.checkItems[i].businessName){
            bool = that.checkItems[i].businessCode
          }
        }
        if (bool === '') {
          that.$message({
            type: 'error',
            message: '项目名有误，请重新选择',
            duration: 4000
          })
          // 禁止使用关闭
          that.selectOnly = false
          // loading关闭
          that.selectLoading = false
          // 重置文字内容
          // that.formData.code = ''
        } else {
          that.handleSelect(bool);
        }
      },
      querySearch(queryString, cb) {
          var businessNameList  = this.businessNameList
          var results = queryString ? businessNameList.filter(this.createFilter(queryString)) : businessNameList
          // 调用 callback 返回建议列表的数据
          cb(results)
      },
      createFilter(queryString) {
          return (restaurant) => {
                return (restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0)
          }
      },
      handleSelect(item) {
        let that = this;
        // console.log(that.formData)
        // console.log(item);
        that.isSelect = true
        that.selectLoading = false
        that.activeCheck = 0
        that.selectOnly = true
        let codes = ''
        for (let n = 0; n < that.checkItems.length; n++) {
          if (that.formData.code === that.checkItems[n].businessName) {
            that.formData.code  = that.checkItems[n].businessName
            that.formData.businessCode = that.checkItems[n].code
            that.formData.businessName = that.checkItems[n].businessName
            codes = that.checkItems[n].code
            // return false
          }
        }
        // console.log(that.formData)
        // return false
        // let url = "./static/report.json"
        let url = URL.api_name + 'cloud/project/getBusinesInfo'
        axios.get(url, {
          params: {
            code: codes
          }
        }).then(function (res) {
          // console.log('x1OK')
          if (res.data.code === '100') {
            that.itemList = res.data.data
            that.formData.dynamicInfoDto = {}
            // 遍历所有步骤
            for (let i = 0; i < that.itemList.length; i++) {
              // 遍历步骤下的条目
              for (let n = 0; n < that.itemList[i].blockFields.length; n++) {
                let keyName = that.itemList[i].blockFields[n].name
                // 判断如果是自动补全系列
                if (that.itemList[i].blockFields[n].type === 'autocomplete') {
                  let cacheName = that.itemList[i].blockFields[n].name
                  that.cacheData[cacheName] = []
                  that.cacheData[cacheName] = that.itemList[i].blockFields[n].businessList
                  // console.log(that.cacheData[cacheName])
                }
                if (that.itemList[i].blockFields[n].element === 'list') {
                  that.formData.dynamicInfoDto[keyName] = that.itemList[i].blockFields[n].initValueJsonObject
                  that.formData.dynamicInfo[keyName] = that.itemList[i].blockFields[n].initValueJsonObject

                } else if (that.itemList[i].blockFields[n].element === 'select') {
                  // 如果
                  that.formData.dynamicInfoDto[keyName] = ''
                } else {
                  that.formData.dynamicInfoDto[keyName] = ''
                }
              }
              // 遍历步骤下的上传文件组件
              // console.log()
              if (that.itemList[i].programVos !== null) {
                for (let s = 0; s < that.itemList[i].programVos.length; s++) {
                  // upfile组
                  let n = that.itemList[i].programVos[s].code
                  that.formData[n] = []
                  that.itemList[i].programVos[s].qual = '30'
                  that.itemList[i].programVos[s].dp = '100'
                }
              }
            }
            that.updata.flowCode = that.formData.flowCode
            that.formData.dynamicInfo.gender = 1
            that.formData.dynamicInfoDto.gender = 1
            // dynamicInfoDto刷新显示视图list   dynamicInfo绑定item对应值
            that.formData.dynamicInfo = that.formData.dynamicInfoDto

            // 获取列表后给msi mmr 设置默认值 3/14号需求更改，修改默认值为空
            // that.formData.dynamicInfo.gene_msi[0].msi = 'MSS'
            // that.formData.dynamicInfo.gene_msi[0].mmr = 'pMMR'
            that.formData.dynamicInfo.gene_msi[0].msi = ''
            that.formData.dynamicInfo.gene_msi[0].mmr = ''
            // console.log(that.formData.dynamicInfo)
          }
        }, function (error) {
          // console.log(error)
          that.$message({
            type: 'error',
            message: '查询失败',
            duration: 1000
          })
        })
      },
      autocompleteList(queryString, cb, objName, tagName) {
        let that = this
        // businessName
        var businessNameList  = that.cacheData[objName]
        var results = queryString ? businessNameList.filter(this.autocompleteFilter(queryString)) : businessNameList
        cb(results)
      },
      autocompleteFilter(queryString) {
        return (restaurant) => {
          return (restaurant.businessName.toLowerCase().indexOf(queryString.toLowerCase()) === 0)
        }
      },
      autocompleteSelect(item, obj) {
        // console.log(item)
        let that = this
        that.formData.dynamicInfo[obj] = item.businessName
      },
      import_before(file) {
        let that = this
        // alert('before_success')
        that.uploading = true
        // that.import_fileList = []
      },
      import_success(response, file, fileList) {
        // 导入成功，拿返回的数据去填充
        let that = this
        // alert('impirt_success')
        // console.log(response)
        that.uploading = false
        for(let q in response.data) {
          // console.log(q)
          if(response.data[q].length > 0) {
            that.formData.dynamicInfoDto[q] = response.data[q]
            response.data[q] = []
            for(let w in response.data[q]) {
              that.formData.dynamicInfoDto[q][w] = response.data[q][w]
            }
          }
          // console.log('+++++++++')
          // console.log(that.formData.dynamicInfoDto[q])
          // if()
        }

        // console.log('____________')
        // console.log(that.formData.dynamicInfoDto)
      },
      changeTubian(index) {
        // 自动改变肿瘤负荷模块的值
        let that = this
        let n = ''
        let num = parseInt(that.formData.dynamicInfoDto.gene_tumor_burden[index].mutationalLoad)
        if(num >= 20) {
          n = '高负荷'
        } else if(num <= 5) {
          n = '低负荷'
        } else if (num >= 6 && num <= 19){
          n = '中等负荷'
        }
        that.formData.dynamicInfoDto.gene_tumor_burden[index].degree = n
      },
      dateFormat (row, column) {
        let date = row[column.property]
        if (date === undefined) {
          return ''
        }
        return moment(date).format('YYYY-MM-DD HH:mm:ss')
      },
      showreportList(num) {
        // 查看报告列表
        let that = this
        if(num !== undefined) {
          that.getSelectFrom.currentPage = num
        }
        that.getSelectOrderDialog = true
        axios.get(URL.api_name + 'cloud/project/orderPage', {params: {
          pageSize: that.getSelectFrom.currentPage,
          pageNumber: that.getSelectFrom.pageSize,
          orderNo: that.getSelectFrom.orderNo,
          userName: that.getSelectFrom.name
        }}).then(function (respose) {
          if (respose.data.code === '100') {
            that.orderData = JSON.parse(respose.data.data)
            if(JSON.parse(respose.data.data).data) {
              that.getSelectFrom.total = that.orderData.data.totalElements
            }
            // console.log(that.orderData.data.totalElements)
          }
        }, function (error) {
          console.log(error)
          that.loading = false
          that.$message({
            type: 'error',
            message: '查询失败',
            duration: 1000
          })
        })
      },
      handleBefore(file) {
        // 上传之前不需要上传，就没这个
      },
      handlePictureCardPreview(file) {
        this.dialogImageUrl = file.url;
        this.ImgVisible = true;
        this.rotateNum = 0,
        this.imgW = "30%"
      },
      leftRotate() {
        // 最大为3
        let that = this
        if(that.rotateNum == 0) {
          that.rotateNum = 3
        } else {
          that.rotateNum = that.rotateNum - 1
        }
      },
      rightRotate() {
        // 最大为3
        let that = this
        if(that.rotateNum == 3) {
          that.rotateNum = 0
        } else {
          that.rotateNum += 1
        }
      },
      addWidth() {
        //
        let that = this
        let w = parseInt(that.imgW.split('%')[0])
        if(w != 100) {
          that.imgW = w + 10 + '%'
        }
      },
      removeWidth() {
        //
        let that = this
        let w = parseInt(that.imgW.split('%')[0])
        if(w != 30) {
          that.imgW = w - 10 + '%'
        }
      },
      checkListItem(item) {
        // 点击订单查询里的选择
        let that = this
        let url = JSON.parse(item.attachmentsPath)
        if(url.length > 0) {
          for (let i = 0; i < url.length; i++) {
            that.fileListe.push({
              url: URL.api_name + 'cloud/project/downloadOrderFile=' + url[i].filePath + '&token=' + that.uploadHeader.token,
              name: ''
            })
          }
        }
        that.getSelectOrderDialog = false
      }
    },
    computed: {
      uploadHeader () {
        return {
          token: JSON.parse(localStorage.getItem('authtoken'))
        }
      }
    },
    components: {
      Pager: Pager
    }
  }
</script>
<style lang="less" scoped>
.position_absolute {
    position: absolute;
    top: 0px;
    right: 10px;
    font-size: 16px;
}
.squerItmes .squerItmes_h2{font-size: 18px;color: #444}
.el-table--border th{padding: 2px}
.like_elTable{border-top:1px solid #e6ebf5; border-left:1px solid #e6ebf5; width:100%; color:#878d99;}
.like_elTable tr td,.like_elTable tr th{border-bottom:1px solid #e6ebf5; border-right:1px solid #e6ebf5; padding:0 10px;}
.el-checkbox+.el-checkbox{margin-left:10px; }
.el-checkbox {margin-right:20px;}
.setWidth {width:120px; margin-left:10px; margin-bottom:10px;}

.qunimade{ display: inline-block; margin-right: 20px; }
  .qunimade span {font-size:20px; cursor: pointer;}
  .qunimade .xz{ width: 20px;display: inline-block; vertical-align: middle; cursor: pointer; }
  .qunimade .xz img{ width:100%; height:auto; }
  .qunimade .xz+.xz{ transform: scale(-1,1);}
  .imgs{ }
  .rotate0{ transform: rotate(0deg) }
  .rotate1{ transform: rotate(90deg) }
  .rotate2{ transform: rotate(180deg) }
  .rotate3{ transform: rotate(270deg) }
  
</style>
<style>
.squerItmes .el-form-item th{padding: 0px;background-color: #eae9e9}
.xeeeee .el-dialog{    margin-top: 5vh!important; }
.noup .el-upload.el-upload--picture-card {display: none;}
</style>
