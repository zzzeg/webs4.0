<template>
  <div class="list">
    <div class="crumbs">
      <el-breadcrumb separator=">">
        <el-breadcrumb-item>> 系统管理</el-breadcrumb-item>
        <el-breadcrumb-item>用户管理</el-breadcrumb-item>
      </el-breadcrumb>
    </div>
    <el-row :gutter="40">
      <!-- <el-col :span="4">
        <div class="tree">
          <el-tree :data="data" :props="defaultProps" @node-click="handleNodeClick"></el-tree>
          <ul class="tree-list">
            <li :class="{'active':item.isCheck === 1}" v-for="(item, index) in groupData" v-on:click="checkGroup(item)">{{ item.name }}</li>
          </ul>
        </div>
      </el-col> -->
      <el-col>
        <div class="search-wrapper" style="margin-top: -20px;">
          <el-form :inline="true" :model="formInline" class="demo-form-inline query-form">
            <el-form-item label="姓名">
              <el-input size="medium" v-model="formInline.name" placeholder="请输入姓名"></el-input>
            </el-form-item>
            <el-form-item label="手机号">
              <el-input size="medium" v-model.number="formInline.phone" placeholder="请输入11位手机号码"></el-input>
            </el-form-item>
            <el-form-item>
              <el-button size="medium" type="primary" @click="search">查询</el-button>
              <el-button size="medium" type="success" @click="addCoupon">添加用户</el-button>
            </el-form-item>
          </el-form>
        </div>
        <div class="table-data"
             v-loading="loading"
             element-loading-text="拼命加载中">
          <el-table :data="tableData" border style="width: 100%">
            <el-table-column label="序号" width="80">
              <template slot-scope="scope">
                {{ (currentPage - 1) * pageSize + scope.$index + 1 }}
              </template>
            </el-table-column>
            <el-table-column prop="userName" label="账号" width="140" sortable>
            </el-table-column>
            <el-table-column prop="nickName" label="呢称" width="140" sortable>
            </el-table-column>
            <el-table-column label="性别" width="100" prop="sex" sortable>
              <template slot-scope="scope">
                {{ scope.row.sex === 1 ? '男' : '女' }}
              </template>
            </el-table-column>
            <el-table-column label="角色" width="120">
              <template slot-scope="scope">
                {{ scope.row.roleId === "1" ? '管理员' : scope.row.roleId === "2" ? '普通用户' : scope.row.roleId === "3" ? '审核员' : scope.row.roleId === "4" ? '终审员' : scope.row.roleId === "5" ? '超级管理员': scope.row.roleId === "6" ? '审核管理员' : '角色出错'  }}
              </template>
            </el-table-column>
            <el-table-column prop="email" label="邮箱" width="230">
            </el-table-column>
            <el-table-column prop="address" label="地址">
            </el-table-column>
            <el-table-column prop="status" label="状态" width="100" sortable>
              <template slot-scope="scope">
                {{ scope.row.status === 1 ? '启用' : scope.row.status === 2 ? '禁用' : '删除'  }}
              </template>
            </el-table-column>
            <el-table-column label="操作" width="230">
              <template slot-scope="scope">
                <el-button type="primary" size="mini" v-if="scope.row.status !== 1" @click="changeType(scope.row, 1)">启用</el-button>
                <el-button type="danger" size="mini" v-if="scope.row.status === 1" @click="changeType(scope.row, 0)">停用</el-button>
                <el-button type="success" size="mini" @click="edit(scope.row)">编辑</el-button>
                <el-button type="warning" size="mini" @click="resetPwd(scope.row.userName)">重置密码</el-button>
                <el-button type="danger" size="mini" v-if="scope.row.status !== 1" @click="deleteTicket(scope.row.userName)">删除</el-button>
              </template>
            </el-table-column>
          </el-table>
        </div>
        <!-- 分页 -->
        <pager :current-page="currentPage" v-on:handleSizeChange="handelCurrent" :pageSize="pageSize" :total-count="totalCount" v-on:handleCurrentChange="getListData"></pager>
      </el-col>
    </el-row>
  </div>
</template>
<script>
  import URL from '@/common/js/URL.js'
  import Pager from '@/components/common/pager'
  import axios from 'axios'
  export default {
    created () {
      this.getGroups()
      this.getListData(this.currentPage)
    },
    data () {
      return {
        formInline: {
          phone: '',
          name: ''
        },
        orgId: 1,
        groupData: [],
        tableData: [],
        currentPage: 1,
        pageSize: 9,
        pageNum: 0,
        totalCount: 0,
        loading: false,
        categoryList: [],
        data: [{
          label: '一级 1',
          id: 1
        }, {
          label: '一级 2',
          id: 2
        }, {
          label: '一级 3',
          id: 3
        }],
        defaultProps: {
          id: 'id',
          label: 'label'
        }
      }
    },
    components: {
      Pager: Pager
    },
    methods: {
      search () {
        if (this.currentPage > 1) {
          this.currentPage = 1
        } else {
          this.getListData(this.currentPage)
        }
      },
      getGroups () {
        // 获取分组列表
        let that = this
        axios.get(URL.api_name + 'cloud/org_list').then(function (respose) {
          let data = respose.data
          // that.groupData = data.data
          for (let i = 0; i < data.data.length; i++) {
            that.groupData.push({
              des: data.data[i].des,
              name: data.data[i].name,
              orgId: data.data[i].orgId,
              isCheck: 0
            })
          }
          // 默认选中第一个
          that.groupData[0].isCheck = 1
        }, function (error) {
          console.log(error)
          that.loading = false
          that.$message({
            type: 'error',
            message: '查询失败',
            duration: 1000
          })
        })
      },
      checkGroup (item) {
        // 分组查询
        let that = this
        for (let i = 0; i < that.groupData.length; i++) {
          that.groupData[i].isCheck = 0
        }
        item.isCheck = 1
        that.orgId = item.orgId
        that.getListData(that.currentPage)
      },
      addCoupon () {
        this.$router.push({
          path: '/userAdd'
        })
      },
      edit(scope) {
        this.$router.push({
          path: '/userEdit/' + scope.userName
        })
      },
      handelCurrent(val) {
        let that = this
        that.pageSize = val
        that.getListData(that.currentPage)
      },
      getListData (num) {
        // console.log(num)
        this.currentPage = num
        var that = this
        that.loading = true
        axios.get(URL.api_name + 'cloud/user_list', {
          params: {
            orgId: that.orgId,
            phone: that.formInline.phone,
            pageSize: that.pageSize,
            pageNumber: num,
            userName: that.formInline.name
          }
        }).then(function (respose) {
          let data = respose.data
          that.tableData = data.data.list
          that.loading = false
          that.totalCount = data.data.total
        }, function (error) {
          console.log(error)
          that.loading = false
          that.$message({
            type: 'error',
            message: '查询失败',
            duration: 1000
          })
        })
      },
      resetPwd (name) {
        let that = this
        let msg = '确认重置密码？(新密码默认重置为：123456)'
        this.$confirm(msg, '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          axios.post(URL.api_name + 'cloud/reset_password', {
            userName: name
          }).then((res) => {
            if (res.data.code === '100') {
              this.$message({
                type: 'success',
                message: res.data.message,
                duration: 1000
              })
              that.getListData(that.currentPage)
            } else {
              that.$message({
                type: 'error',
                message: '重置失败，请重新设置',
                duration: 1000
              })
            }
          })
        }).catch(() => {
          that.$message({
            type: 'info',
            message: '已取消'
          })
        })
      },
      changeType (scope, status) {
        // axios.xx
        var that = this
        let msg = ''
        let stat = 0
        if (status === 1) {
          msg = '确定启用该账户吗？'
          stat = 1
        } else {
          msg = '确定停用该账户吗？'
          stat = 2
        }
        this.$confirm(msg, '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          axios.post(URL.api_name + 'cloud/user_status_change', {
            userName: scope.userName,
            status: stat
          }).then((res) => {
            if (res.data.code === '100') {
              this.$message({
                type: 'success',
                message: res.data.message,
                duration: 1000
              })
              that.getListData(that.currentPage)
            } else {
              that.$message({
                type: 'error',
                message: '操作失败，请重新操作',
                duration: 1000
              })
            }
          })
        }).catch(() => {
          that.$message({
            type: 'info',
            message: '已取消'
          })
        })
      },
      deleteTicket (name) {
        var that = this
        that.$confirm('确定删除吗？', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          axios.post(URL.api_name + 'cloud/delete_user', {
            userName: name
          }).then(res => {
            if (res.data.code === '100') {
              that.$message({
                type: 'success',
                message: '删除成功',
                duration: 1000
              })
              that.getListData(that.currentPage)
            }
          }).catch(err => {
            that.$message({
              type: 'error',
              message: '删除失败',
              duration: 1000
            })
            console.log(err)
          })
        }).catch(() => {})
      }
    }
  }
</script>
<style lang="less" scoped>
  .coupon-logo{
    display: inline-block;
    width: 80px;
    height: 80px;
    border-radius: 50%;
    vertical-align: bottom;
  }
  .left-tree{ float:left; width:200px;}
  .tree--list{ line-height:40px; text-indent: 20px; border:1px solid rgb(209, 219, 229); min-height: 700px; background:#fafafa}
  .tree--list li{font-size: 14px; cursor: pointer; padding: 0 10px; line-height:40px;}
  .tree--list li:hover,.tree--list li.active{ background:#ccc;}
  @media only screen and (min-width: 1366px) and (max-width: 1436px) {
  .tree--list {
     min-height: 520px;
  }
}
  @media screen and (max-width: 1360px) {
  .tree--list {
     min-height: 430px;
  }
}

</style>
